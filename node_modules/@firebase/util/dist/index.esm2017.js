/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const _ = function(e) {
  const t = [];
  let r = 0;
  for (let o = 0; o < e.length; o++) {
    let n = e.charCodeAt(o);
    n < 128 ? t[r++] = n : n < 2048 ? (t[r++] = n >> 6 | 192, t[r++] = n & 63 | 128) : (n & 64512) === 55296 && o + 1 < e.length && (e.charCodeAt(o + 1) & 64512) === 56320 ? (n = 65536 + ((n & 1023) << 10) + (e.charCodeAt(++o) & 1023), t[r++] = n >> 18 | 240, t[r++] = n >> 12 & 63 | 128, t[r++] = n >> 6 & 63 | 128, t[r++] = n & 63 | 128) : (t[r++] = n >> 12 | 224, t[r++] = n >> 6 & 63 | 128, t[r++] = n & 63 | 128);
  }
  return t;
}, S = function(e) {
  const t = [];
  let r = 0, o = 0;
  for (; r < e.length; ) {
    const n = e[r++];
    if (n < 128)
      t[o++] = String.fromCharCode(n);
    else if (n > 191 && n < 224) {
      const s = e[r++];
      t[o++] = String.fromCharCode((n & 31) << 6 | s & 63);
    } else if (n > 239 && n < 365) {
      const s = e[r++], i = e[r++], c = e[r++], a = ((n & 7) << 18 | (s & 63) << 12 | (i & 63) << 6 | c & 63) - 65536;
      t[o++] = String.fromCharCode(55296 + (a >> 10)), t[o++] = String.fromCharCode(56320 + (a & 1023));
    } else {
      const s = e[r++], i = e[r++];
      t[o++] = String.fromCharCode((n & 15) << 12 | (s & 63) << 6 | i & 63);
    }
  }
  return t.join("");
}, v = {
  /**
   * Maps bytes to characters.
   */
  byteToCharMap_: null,
  /**
   * Maps characters to bytes.
   */
  charToByteMap_: null,
  /**
   * Maps bytes to websafe characters.
   * @private
   */
  byteToCharMapWebSafe_: null,
  /**
   * Maps websafe characters to bytes.
   * @private
   */
  charToByteMapWebSafe_: null,
  /**
   * Our default alphabet, shared between
   * ENCODED_VALS and ENCODED_VALS_WEBSAFE
   */
  ENCODED_VALS_BASE: "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789",
  /**
   * Our default alphabet. Value 64 (=) is special; it means "nothing."
   */
  get ENCODED_VALS() {
    return this.ENCODED_VALS_BASE + "+/=";
  },
  /**
   * Our websafe alphabet.
   */
  get ENCODED_VALS_WEBSAFE() {
    return this.ENCODED_VALS_BASE + "-_.";
  },
  /**
   * Whether this browser supports the atob and btoa functions. This extension
   * started at Mozilla but is now implemented by many browsers. We use the
   * ASSUME_* variables to avoid pulling in the full useragent detection library
   * but still allowing the standard per-browser compilations.
   *
   */
  HAS_NATIVE_SUPPORT: typeof atob == "function",
  /**
   * Base64-encode an array of bytes.
   *
   * @param input An array of bytes (numbers with
   *     value in [0, 255]) to encode.
   * @param webSafe Boolean indicating we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeByteArray(e, t) {
    if (!Array.isArray(e))
      throw Error("encodeByteArray takes an array as a parameter");
    this.init_();
    const r = t ? this.byteToCharMapWebSafe_ : this.byteToCharMap_, o = [];
    for (let n = 0; n < e.length; n += 3) {
      const s = e[n], i = n + 1 < e.length, c = i ? e[n + 1] : 0, a = n + 2 < e.length, u = a ? e[n + 2] : 0, b = s >> 2, f = (s & 3) << 4 | c >> 4;
      let h = (c & 15) << 2 | u >> 6, d = u & 63;
      a || (d = 64, i || (h = 64)), o.push(r[b], r[f], r[h], r[d]);
    }
    return o.join("");
  },
  /**
   * Base64-encode a string.
   *
   * @param input A string to encode.
   * @param webSafe If true, we should use the
   *     alternative alphabet.
   * @return The base64 encoded string.
   */
  encodeString(e, t) {
    return this.HAS_NATIVE_SUPPORT && !t ? btoa(e) : this.encodeByteArray(_(e), t);
  },
  /**
   * Base64-decode a string.
   *
   * @param input to decode.
   * @param webSafe True if we should use the
   *     alternative alphabet.
   * @return string representing the decoded value.
   */
  decodeString(e, t) {
    return this.HAS_NATIVE_SUPPORT && !t ? atob(e) : S(this.decodeStringToByteArray(e, t));
  },
  /**
   * Base64-decode a string.
   *
   * In base-64 decoding, groups of four characters are converted into three
   * bytes.  If the encoder did not apply padding, the input length may not
   * be a multiple of 4.
   *
   * In this case, the last group will have fewer than 4 characters, and
   * padding will be inferred.  If the group has one or two characters, it decodes
   * to one byte.  If the group has three characters, it decodes to two bytes.
   *
   * @param input Input to decode.
   * @param webSafe True if we should use the web-safe alphabet.
   * @return bytes representing the decoded value.
   */
  decodeStringToByteArray(e, t) {
    this.init_();
    const r = t ? this.charToByteMapWebSafe_ : this.charToByteMap_, o = [];
    for (let n = 0; n < e.length; ) {
      const s = r[e.charAt(n++)], c = n < e.length ? r[e.charAt(n)] : 0;
      ++n;
      const u = n < e.length ? r[e.charAt(n)] : 64;
      ++n;
      const f = n < e.length ? r[e.charAt(n)] : 64;
      if (++n, s == null || c == null || u == null || f == null)
        throw new B();
      const h = s << 2 | c >> 4;
      if (o.push(h), u !== 64) {
        const d = c << 4 & 240 | u >> 2;
        if (o.push(d), f !== 64) {
          const A = u << 6 & 192 | f;
          o.push(A);
        }
      }
    }
    return o;
  },
  /**
   * Lazy static initialization function. Called before
   * accessing any of the static map variables.
   * @private
   */
  init_() {
    if (!this.byteToCharMap_) {
      this.byteToCharMap_ = {}, this.charToByteMap_ = {}, this.byteToCharMapWebSafe_ = {}, this.charToByteMapWebSafe_ = {};
      for (let e = 0; e < this.ENCODED_VALS.length; e++)
        this.byteToCharMap_[e] = this.ENCODED_VALS.charAt(e), this.charToByteMap_[this.byteToCharMap_[e]] = e, this.byteToCharMapWebSafe_[e] = this.ENCODED_VALS_WEBSAFE.charAt(e), this.charToByteMapWebSafe_[this.byteToCharMapWebSafe_[e]] = e, e >= this.ENCODED_VALS_BASE.length && (this.charToByteMap_[this.ENCODED_VALS_WEBSAFE.charAt(e)] = e, this.charToByteMapWebSafe_[this.ENCODED_VALS.charAt(e)] = e);
    }
  }
};
class B extends Error {
  constructor() {
    super(...arguments), this.name = "DecodeBase64StringError";
  }
}
const C = function(e) {
  const t = _(e);
  return v.encodeByteArray(t, !0);
}, g = function(e) {
  return C(e).replace(/\./g, "");
}, D = function(e) {
  try {
    return v.decodeString(e, !0);
  } catch (t) {
    console.error("base64Decode failed: ", t);
  }
  return null;
};
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function T() {
  if (typeof self < "u")
    return self;
  if (typeof window < "u")
    return window;
  if (typeof global < "u")
    return global;
  throw new Error("Unable to locate global object.");
}
/**
 * @license
 * Copyright 2022 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const O = () => T().__FIREBASE_DEFAULTS__, x = () => {
  if (typeof process > "u" || typeof process.env > "u")
    return;
  const e = process.env.__FIREBASE_DEFAULTS__;
  if (e)
    return JSON.parse(e);
}, w = () => {
  if (typeof document > "u")
    return;
  let e;
  try {
    e = document.cookie.match(/__FIREBASE_DEFAULTS__=([^;]+)/);
  } catch {
    return;
  }
  const t = e && D(e[1]);
  return t && JSON.parse(t);
}, p = () => {
  try {
    return O() || x() || w();
  } catch (e) {
    console.info(`Unable to get __FIREBASE_DEFAULTS__ due to: ${e}`);
    return;
  }
}, M = (e) => {
  var t, r;
  return (r = (t = p()) === null || t === void 0 ? void 0 : t.emulatorHosts) === null || r === void 0 ? void 0 : r[e];
}, F = (e) => {
  const t = M(e);
  if (!t)
    return;
  const r = t.lastIndexOf(":");
  if (r <= 0 || r + 1 === t.length)
    throw new Error(`Invalid host ${t} with no separate hostname and port!`);
  const o = parseInt(t.substring(r + 1), 10);
  return t[0] === "[" ? [t.substring(1, r - 1), o] : [t.substring(0, r), o];
}, L = () => {
  var e;
  return (e = p()) === null || e === void 0 ? void 0 : e.config;
}, V = (e) => {
  var t;
  return (t = p()) === null || t === void 0 ? void 0 : t[`_${e}`];
};
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class W {
  constructor() {
    this.reject = () => {
    }, this.resolve = () => {
    }, this.promise = new Promise((t, r) => {
      this.resolve = t, this.reject = r;
    });
  }
  /**
   * Our API internals are not promiseified and cannot because our callback APIs have subtle expectations around
   * invoking promises inline, which Promises are forbidden to do. This method accepts an optional node-style callback
   * and returns a node-style callback which will resolve or reject the Deferred's promise.
   */
  wrapCallback(t) {
    return (r, o) => {
      r ? this.reject(r) : this.resolve(o), typeof t == "function" && (this.promise.catch(() => {
      }), t.length === 1 ? t(r) : t(r, o));
    };
  }
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function $(e, t) {
  if (e.uid)
    throw new Error('The "uid" field is no longer supported by mockUserToken. Please use "sub" instead for Firebase Auth User ID.');
  const r = {
    alg: "none",
    type: "JWT"
  }, o = t || "demo-project", n = e.iat || 0, s = e.sub || e.user_id;
  if (!s)
    throw new Error("mockUserToken must contain 'sub' or 'user_id' field!");
  const i = Object.assign({
    // Set all required fields to decent defaults
    iss: `https://securetoken.google.com/${o}`,
    aud: o,
    iat: n,
    exp: n + 3600,
    auth_time: n,
    sub: s,
    user_id: s,
    firebase: {
      sign_in_provider: "custom",
      identities: {}
    }
  }, e), c = "";
  return [
    g(JSON.stringify(r)),
    g(JSON.stringify(i)),
    c
  ].join(".");
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function m() {
  return typeof navigator < "u" && typeof navigator.userAgent == "string" ? navigator.userAgent : "";
}
function H() {
  return typeof window < "u" && // @ts-ignore Setting up an broadly applicable index signature for Window
  // just to deal with this case would probably be a bad idea.
  !!(window.cordova || window.phonegap || window.PhoneGap) && /ios|iphone|ipod|ipad|android|blackberry|iemobile/i.test(m());
}
function J() {
  const e = typeof chrome == "object" ? chrome.runtime : typeof browser == "object" ? browser.runtime : void 0;
  return typeof e == "object" && e.id !== void 0;
}
function q() {
  return typeof navigator == "object" && navigator.product === "ReactNative";
}
function z() {
  const e = m();
  return e.indexOf("MSIE ") >= 0 || e.indexOf("Trident/") >= 0;
}
function G() {
  try {
    return typeof indexedDB == "object";
  } catch {
    return !1;
  }
}
function K() {
  return new Promise((e, t) => {
    try {
      let r = !0;
      const o = "validate-browser-context-for-indexeddb-analytics-module", n = self.indexedDB.open(o);
      n.onsuccess = () => {
        n.result.close(), r || self.indexedDB.deleteDatabase(o), e(!0);
      }, n.onupgradeneeded = () => {
        r = !1;
      }, n.onerror = () => {
        var s;
        t(((s = n.error) === null || s === void 0 ? void 0 : s.message) || "");
      };
    } catch (r) {
      t(r);
    }
  });
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const N = "FirebaseError";
class y extends Error {
  constructor(t, r, o) {
    super(r), this.code = t, this.customData = o, this.name = N, Object.setPrototypeOf(this, y.prototype), Error.captureStackTrace && Error.captureStackTrace(this, I.prototype.create);
  }
}
class I {
  constructor(t, r, o) {
    this.service = t, this.serviceName = r, this.errors = o;
  }
  create(t, ...r) {
    const o = r[0] || {}, n = `${this.service}/${t}`, s = this.errors[t], i = s ? j(s, o) : "Error", c = `${this.serviceName}: ${i} (${n}).`;
    return new y(n, c, o);
  }
}
function j(e, t) {
  return e.replace(U, (r, o) => {
    const n = t[o];
    return n != null ? String(n) : `<${o}?>`;
  });
}
const U = /\{\$([^}]+)}/g;
function Q(e) {
  for (const t in e)
    if (Object.prototype.hasOwnProperty.call(e, t))
      return !1;
  return !0;
}
function k(e, t) {
  if (e === t)
    return !0;
  const r = Object.keys(e), o = Object.keys(t);
  for (const n of r) {
    if (!o.includes(n))
      return !1;
    const s = e[n], i = t[n];
    if (E(s) && E(i)) {
      if (!k(s, i))
        return !1;
    } else if (s !== i)
      return !1;
  }
  for (const n of o)
    if (!r.includes(n))
      return !1;
  return !0;
}
function E(e) {
  return e !== null && typeof e == "object";
}
/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function X(e) {
  const t = [];
  for (const [r, o] of Object.entries(e))
    Array.isArray(o) ? o.forEach((n) => {
      t.push(encodeURIComponent(r) + "=" + encodeURIComponent(n));
    }) : t.push(encodeURIComponent(r) + "=" + encodeURIComponent(o));
  return t.length ? "&" + t.join("&") : "";
}
function Y(e) {
  const t = {};
  return e.replace(/^\?/, "").split("&").forEach((o) => {
    if (o) {
      const [n, s] = o.split("=");
      t[decodeURIComponent(n)] = decodeURIComponent(s);
    }
  }), t;
}
function Z(e) {
  const t = e.indexOf("?");
  if (!t)
    return "";
  const r = e.indexOf("#", t);
  return e.substring(t, r > 0 ? r : void 0);
}
function ee(e, t) {
  const r = new P(e, t);
  return r.subscribe.bind(r);
}
class P {
  /**
   * @param executor Function which can make calls to a single Observer
   *     as a proxy.
   * @param onNoObservers Callback when count of Observers goes to zero.
   */
  constructor(t, r) {
    this.observers = [], this.unsubscribes = [], this.observerCount = 0, this.task = Promise.resolve(), this.finalized = !1, this.onNoObservers = r, this.task.then(() => {
      t(this);
    }).catch((o) => {
      this.error(o);
    });
  }
  next(t) {
    this.forEachObserver((r) => {
      r.next(t);
    });
  }
  error(t) {
    this.forEachObserver((r) => {
      r.error(t);
    }), this.close(t);
  }
  complete() {
    this.forEachObserver((t) => {
      t.complete();
    }), this.close();
  }
  /**
   * Subscribe function that can be used to add an Observer to the fan-out list.
   *
   * - We require that no event is sent to a subscriber sychronously to their
   *   call to subscribe().
   */
  subscribe(t, r, o) {
    let n;
    if (t === void 0 && r === void 0 && o === void 0)
      throw new Error("Missing Observer.");
    R(t, [
      "next",
      "error",
      "complete"
    ]) ? n = t : n = {
      next: t,
      error: r,
      complete: o
    }, n.next === void 0 && (n.next = l), n.error === void 0 && (n.error = l), n.complete === void 0 && (n.complete = l);
    const s = this.unsubscribeOne.bind(this, this.observers.length);
    return this.finalized && this.task.then(() => {
      try {
        this.finalError ? n.error(this.finalError) : n.complete();
      } catch {
      }
    }), this.observers.push(n), s;
  }
  // Unsubscribe is synchronous - we guarantee that no events are sent to
  // any unsubscribed Observer.
  unsubscribeOne(t) {
    this.observers === void 0 || this.observers[t] === void 0 || (delete this.observers[t], this.observerCount -= 1, this.observerCount === 0 && this.onNoObservers !== void 0 && this.onNoObservers(this));
  }
  forEachObserver(t) {
    if (!this.finalized)
      for (let r = 0; r < this.observers.length; r++)
        this.sendOne(r, t);
  }
  // Call the Observer via one of it's callback function. We are careful to
  // confirm that the observe has not been unsubscribed since this asynchronous
  // function had been queued.
  sendOne(t, r) {
    this.task.then(() => {
      if (this.observers !== void 0 && this.observers[t] !== void 0)
        try {
          r(this.observers[t]);
        } catch (o) {
          typeof console < "u" && console.error && console.error(o);
        }
    });
  }
  close(t) {
    this.finalized || (this.finalized = !0, t !== void 0 && (this.finalError = t), this.task.then(() => {
      this.observers = void 0, this.onNoObservers = void 0;
    }));
  }
}
function R(e, t) {
  if (typeof e != "object" || e === null)
    return !1;
  for (const r of t)
    if (r in e && typeof e[r] == "function")
      return !0;
  return !1;
}
function l() {
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function te(e) {
  return e && e._delegate ? e._delegate : e;
}
export {
  B as DecodeBase64StringError,
  W as Deferred,
  I as ErrorFactory,
  y as FirebaseError,
  v as base64,
  D as base64Decode,
  C as base64Encode,
  g as base64urlEncodeWithoutPadding,
  $ as createMockUserToken,
  ee as createSubscribe,
  k as deepEqual,
  Z as extractQuerystring,
  L as getDefaultAppConfig,
  M as getDefaultEmulatorHost,
  F as getDefaultEmulatorHostnameAndPort,
  p as getDefaults,
  V as getExperimentalSetting,
  T as getGlobal,
  te as getModularInstance,
  m as getUA,
  J as isBrowserExtension,
  Q as isEmpty,
  z as isIE,
  G as isIndexedDBAvailable,
  H as isMobileCordova,
  q as isReactNative,
  X as querystring,
  Y as querystringDecode,
  K as validateIndexedDBOpenable
};
