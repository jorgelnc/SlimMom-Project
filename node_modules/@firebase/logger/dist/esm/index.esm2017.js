/**
 * @license
 * Copyright 2017 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
var t;
(function(r) {
  r[r.DEBUG = 0] = "DEBUG", r[r.VERBOSE = 1] = "VERBOSE", r[r.INFO = 2] = "INFO", r[r.WARN = 3] = "WARN", r[r.ERROR = 4] = "ERROR", r[r.SILENT = 5] = "SILENT";
})(t || (t = {}));
const l = {
  debug: t.DEBUG,
  verbose: t.VERBOSE,
  info: t.INFO,
  warn: t.WARN,
  error: t.ERROR,
  silent: t.SILENT
}, i = t.INFO, h = {
  [t.DEBUG]: "log",
  [t.VERBOSE]: "log",
  [t.INFO]: "info",
  [t.WARN]: "warn",
  [t.ERROR]: "error"
}, d = (r, e, ...o) => {
  if (e < r.logLevel)
    return;
  const n = (/* @__PURE__ */ new Date()).toISOString(), s = h[e];
  if (s)
    console[s](`[${n}]  ${r.name}:`, ...o);
  else
    throw new Error(`Attempted to log a message with an invalid logType (value: ${e})`);
};
class g {
  /**
   * Gives you an instance of a Logger to capture messages according to
   * Firebase's logging scheme.
   *
   * @param name The name that the logs will be associated with
   */
  constructor(e) {
    this.name = e, this._logLevel = i, this._logHandler = d, this._userLogHandler = null;
  }
  get logLevel() {
    return this._logLevel;
  }
  set logLevel(e) {
    if (!(e in t))
      throw new TypeError(`Invalid value "${e}" assigned to \`logLevel\``);
    this._logLevel = e;
  }
  // Workaround for setter/getter having to be the same type.
  setLogLevel(e) {
    this._logLevel = typeof e == "string" ? l[e] : e;
  }
  get logHandler() {
    return this._logHandler;
  }
  set logHandler(e) {
    if (typeof e != "function")
      throw new TypeError("Value assigned to `logHandler` must be a function");
    this._logHandler = e;
  }
  get userLogHandler() {
    return this._userLogHandler;
  }
  set userLogHandler(e) {
    this._userLogHandler = e;
  }
  /**
   * The functions below are all based on the `console` interface
   */
  debug(...e) {
    this._userLogHandler && this._userLogHandler(this, t.DEBUG, ...e), this._logHandler(this, t.DEBUG, ...e);
  }
  log(...e) {
    this._userLogHandler && this._userLogHandler(this, t.VERBOSE, ...e), this._logHandler(this, t.VERBOSE, ...e);
  }
  info(...e) {
    this._userLogHandler && this._userLogHandler(this, t.INFO, ...e), this._logHandler(this, t.INFO, ...e);
  }
  warn(...e) {
    this._userLogHandler && this._userLogHandler(this, t.WARN, ...e), this._logHandler(this, t.WARN, ...e);
  }
  error(...e) {
    this._userLogHandler && this._userLogHandler(this, t.ERROR, ...e), this._logHandler(this, t.ERROR, ...e);
  }
}
export {
  t as LogLevel,
  g as Logger
};
