import { Component as l, ComponentContainer as x } from "../../../component/dist/esm/index.esm2017.js";
import { Logger as N } from "../../../logger/dist/esm/index.esm2017.js";
import { getDefaultAppConfig as I, deepEqual as D, ErrorFactory as O, base64urlEncodeWithoutPadding as y, isIndexedDBAvailable as H, validateIndexedDBOpenable as P, FirebaseError as S } from "../../../util/dist/index.esm2017.js";
import { openDB as T } from "../../../../idb/build/index.js";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class R {
  constructor(e) {
    this.container = e;
  }
  // In initial implementation, this will be called by installations on
  // auth token refresh, and installations will send this string.
  getPlatformInfoString() {
    return this.container.getProviders().map((t) => {
      if (M(t)) {
        const n = t.getImmediate();
        return `${n.library}/${n.version}`;
      } else
        return null;
    }).filter((t) => t).join(" ");
  }
}
function M(a) {
  const e = a.getComponent();
  return (e == null ? void 0 : e.type) === "VERSION";
}
const g = "@firebase/app", v = "0.9.26";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const h = new N("@firebase/app"), j = "@firebase/app-compat", F = "@firebase/analytics-compat", k = "@firebase/analytics", U = "@firebase/app-check-compat", L = "@firebase/app-check", V = "@firebase/auth", G = "@firebase/auth-compat", Y = "@firebase/database", J = "@firebase/database-compat", X = "@firebase/functions", q = "@firebase/functions-compat", z = "@firebase/installations", K = "@firebase/installations-compat", W = "@firebase/messaging", Q = "@firebase/messaging-compat", Z = "@firebase/performance", ee = "@firebase/performance-compat", te = "@firebase/remote-config", ae = "@firebase/remote-config-compat", re = "@firebase/storage", ne = "@firebase/storage-compat", se = "@firebase/firestore", ie = "@firebase/firestore-compat", oe = "firebase", ce = "10.7.2";
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const u = "[DEFAULT]", he = {
  [g]: "fire-core",
  [j]: "fire-core-compat",
  [k]: "fire-analytics",
  [F]: "fire-analytics-compat",
  [L]: "fire-app-check",
  [U]: "fire-app-check-compat",
  [V]: "fire-auth",
  [G]: "fire-auth-compat",
  [Y]: "fire-rtdb",
  [J]: "fire-rtdb-compat",
  [X]: "fire-fn",
  [q]: "fire-fn-compat",
  [z]: "fire-iid",
  [K]: "fire-iid-compat",
  [W]: "fire-fcm",
  [Q]: "fire-fcm-compat",
  [Z]: "fire-perf",
  [ee]: "fire-perf-compat",
  [te]: "fire-rc",
  [ae]: "fire-rc-compat",
  [re]: "fire-gcs",
  [ne]: "fire-gcs-compat",
  [se]: "fire-fst",
  [ie]: "fire-fst-compat",
  "fire-js": "fire-js",
  [oe]: "fire-js-all"
};
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const d = /* @__PURE__ */ new Map(), _ = /* @__PURE__ */ new Map();
function pe(a, e) {
  try {
    a.container.addComponent(e);
  } catch (t) {
    h.debug(`Component ${e.name} failed to register with FirebaseApp ${a.name}`, t);
  }
}
function w(a) {
  const e = a.name;
  if (_.has(e))
    return h.debug(`There were multiple attempts to register component ${e}.`), !1;
  _.set(e, a);
  for (const t of d.values())
    pe(t, a);
  return !0;
}
function Se(a, e) {
  const t = a.container.getProvider("heartbeat").getImmediate({ optional: !0 });
  return t && t.triggerHeartbeat(), a.container.getProvider(e);
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const le = {
  "no-app": "No Firebase App '{$appName}' has been created - call initializeApp() first",
  "bad-app-name": "Illegal App name: '{$appName}",
  "duplicate-app": "Firebase App named '{$appName}' already exists with different options or config",
  "app-deleted": "Firebase App named '{$appName}' already deleted",
  "no-options": "Need to provide options, when not being deployed to hosting via source.",
  "invalid-app-argument": "firebase.{$appName}() takes either no argument or a Firebase App instance.",
  "invalid-log-argument": "First argument to `onLog` must be null or a function.",
  "idb-open": "Error thrown when opening IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-get": "Error thrown when reading from IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-set": "Error thrown when writing to IndexedDB. Original error: {$originalErrorMessage}.",
  "idb-delete": "Error thrown when deleting from IndexedDB. Original error: {$originalErrorMessage}."
}, c = new O("app", "Firebase", le);
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
class de {
  constructor(e, t, n) {
    this._isDeleted = !1, this._options = Object.assign({}, e), this._config = Object.assign({}, t), this._name = t.name, this._automaticDataCollectionEnabled = t.automaticDataCollectionEnabled, this._container = n, this.container.addComponent(new l(
      "app",
      () => this,
      "PUBLIC"
      /* ComponentType.PUBLIC */
    ));
  }
  get automaticDataCollectionEnabled() {
    return this.checkDestroyed(), this._automaticDataCollectionEnabled;
  }
  set automaticDataCollectionEnabled(e) {
    this.checkDestroyed(), this._automaticDataCollectionEnabled = e;
  }
  get name() {
    return this.checkDestroyed(), this._name;
  }
  get options() {
    return this.checkDestroyed(), this._options;
  }
  get config() {
    return this.checkDestroyed(), this._config;
  }
  get container() {
    return this._container;
  }
  get isDeleted() {
    return this._isDeleted;
  }
  set isDeleted(e) {
    this._isDeleted = e;
  }
  /**
   * This function will throw an Error if the App has already been deleted -
   * use before performing API actions on the App.
   */
  checkDestroyed() {
    if (this.isDeleted)
      throw c.create("app-deleted", { appName: this._name });
  }
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const Ae = ce;
function me(a, e = {}) {
  let t = a;
  typeof e != "object" && (e = { name: e });
  const n = Object.assign({ name: u, automaticDataCollectionEnabled: !1 }, e), r = n.name;
  if (typeof r != "string" || !r)
    throw c.create("bad-app-name", {
      appName: String(r)
    });
  if (t || (t = I()), !t)
    throw c.create(
      "no-options"
      /* AppError.NO_OPTIONS */
    );
  const s = d.get(r);
  if (s) {
    if (D(t, s.options) && D(n, s.config))
      return s;
    throw c.create("duplicate-app", { appName: r });
  }
  const i = new x(r);
  for (const m of _.values())
    i.addComponent(m);
  const o = new de(t, n, i);
  return d.set(r, o), o;
}
function Be(a = u) {
  const e = d.get(a);
  if (!e && a === u && I())
    return me();
  if (!e)
    throw c.create("no-app", { appName: a });
  return e;
}
function f(a, e, t) {
  var n;
  let r = (n = he[a]) !== null && n !== void 0 ? n : a;
  t && (r += `-${t}`);
  const s = r.match(/\s|\//), i = e.match(/\s|\//);
  if (s || i) {
    const o = [
      `Unable to register library "${r}" with version "${e}":`
    ];
    s && o.push(`library name "${r}" contains illegal characters (whitespace or "/")`), s && i && o.push("and"), i && o.push(`version name "${e}" contains illegal characters (whitespace or "/")`), h.warn(o.join(" "));
    return;
  }
  w(new l(
    `${r}-version`,
    () => ({ library: r, version: e }),
    "VERSION"
    /* ComponentType.VERSION */
  ));
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const fe = "firebase-heartbeat-database", be = 1, p = "firebase-heartbeat-store";
let b = null;
function A() {
  return b || (b = T(fe, be, {
    upgrade: (a, e) => {
      switch (e) {
        case 0:
          try {
            a.createObjectStore(p);
          } catch (t) {
            console.warn(t);
          }
      }
    }
  }).catch((a) => {
    throw c.create("idb-open", {
      originalErrorMessage: a.message
    });
  })), b;
}
async function ge(a) {
  try {
    return await (await A()).transaction(p).objectStore(p).get(B(a));
  } catch (e) {
    if (e instanceof S)
      h.warn(e.message);
    else {
      const t = c.create("idb-get", {
        originalErrorMessage: e == null ? void 0 : e.message
      });
      h.warn(t.message);
    }
  }
}
async function E(a, e) {
  try {
    const n = (await A()).transaction(p, "readwrite");
    await n.objectStore(p).put(e, B(a)), await n.done;
  } catch (t) {
    if (t instanceof S)
      h.warn(t.message);
    else {
      const n = c.create("idb-set", {
        originalErrorMessage: t == null ? void 0 : t.message
      });
      h.warn(n.message);
    }
  }
}
function B(a) {
  return `${a.name}!${a.options.appId}`;
}
/**
 * @license
 * Copyright 2021 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
const ue = 1024, _e = 30 * 24 * 60 * 60 * 1e3;
class we {
  constructor(e) {
    this.container = e, this._heartbeatsCache = null;
    const t = this.container.getProvider("app").getImmediate();
    this._storage = new ve(t), this._heartbeatsCachePromise = this._storage.read().then((n) => (this._heartbeatsCache = n, n));
  }
  /**
   * Called to report a heartbeat. The function will generate
   * a HeartbeatsByUserAgent object, update heartbeatsCache, and persist it
   * to IndexedDB.
   * Note that we only store one heartbeat per day. So if a heartbeat for today is
   * already logged, subsequent calls to this function in the same day will be ignored.
   */
  async triggerHeartbeat() {
    var e, t;
    const r = this.container.getProvider("platform-logger").getImmediate().getPlatformInfoString(), s = $();
    if (!(((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null && (this._heartbeatsCache = await this._heartbeatsCachePromise, ((t = this._heartbeatsCache) === null || t === void 0 ? void 0 : t.heartbeats) == null)) && !(this._heartbeatsCache.lastSentHeartbeatDate === s || this._heartbeatsCache.heartbeats.some((i) => i.date === s)))
      return this._heartbeatsCache.heartbeats.push({ date: s, agent: r }), this._heartbeatsCache.heartbeats = this._heartbeatsCache.heartbeats.filter((i) => {
        const o = new Date(i.date).valueOf();
        return Date.now() - o <= _e;
      }), this._storage.overwrite(this._heartbeatsCache);
  }
  /**
   * Returns a base64 encoded string which can be attached to the heartbeat-specific header directly.
   * It also clears all heartbeats from memory as well as in IndexedDB.
   *
   * NOTE: Consuming product SDKs should not send the header if this method
   * returns an empty string.
   */
  async getHeartbeatsHeader() {
    var e;
    if (this._heartbeatsCache === null && await this._heartbeatsCachePromise, ((e = this._heartbeatsCache) === null || e === void 0 ? void 0 : e.heartbeats) == null || this._heartbeatsCache.heartbeats.length === 0)
      return "";
    const t = $(), { heartbeatsToSend: n, unsentEntries: r } = De(this._heartbeatsCache.heartbeats), s = y(JSON.stringify({ version: 2, heartbeats: n }));
    return this._heartbeatsCache.lastSentHeartbeatDate = t, r.length > 0 ? (this._heartbeatsCache.heartbeats = r, await this._storage.overwrite(this._heartbeatsCache)) : (this._heartbeatsCache.heartbeats = [], this._storage.overwrite(this._heartbeatsCache)), s;
  }
}
function $() {
  return (/* @__PURE__ */ new Date()).toISOString().substring(0, 10);
}
function De(a, e = ue) {
  const t = [];
  let n = a.slice();
  for (const r of a) {
    const s = t.find((i) => i.agent === r.agent);
    if (s) {
      if (s.dates.push(r.date), C(t) > e) {
        s.dates.pop();
        break;
      }
    } else if (t.push({
      agent: r.agent,
      dates: [r.date]
    }), C(t) > e) {
      t.pop();
      break;
    }
    n = n.slice(1);
  }
  return {
    heartbeatsToSend: t,
    unsentEntries: n
  };
}
class ve {
  constructor(e) {
    this.app = e, this._canUseIndexedDBPromise = this.runIndexedDBEnvironmentCheck();
  }
  async runIndexedDBEnvironmentCheck() {
    return H() ? P().then(() => !0).catch(() => !1) : !1;
  }
  /**
   * Read all heartbeats.
   */
  async read() {
    if (await this._canUseIndexedDBPromise) {
      const t = await ge(this.app);
      return t != null && t.heartbeats ? t : { heartbeats: [] };
    } else
      return { heartbeats: [] };
  }
  // overwrite the storage with the provided heartbeats
  async overwrite(e) {
    var t;
    if (await this._canUseIndexedDBPromise) {
      const r = await this.read();
      return E(this.app, {
        lastSentHeartbeatDate: (t = e.lastSentHeartbeatDate) !== null && t !== void 0 ? t : r.lastSentHeartbeatDate,
        heartbeats: e.heartbeats
      });
    } else
      return;
  }
  // add heartbeats
  async add(e) {
    var t;
    if (await this._canUseIndexedDBPromise) {
      const r = await this.read();
      return E(this.app, {
        lastSentHeartbeatDate: (t = e.lastSentHeartbeatDate) !== null && t !== void 0 ? t : r.lastSentHeartbeatDate,
        heartbeats: [
          ...r.heartbeats,
          ...e.heartbeats
        ]
      });
    } else
      return;
  }
}
function C(a) {
  return y(
    // heartbeatsCache wrapper properties
    JSON.stringify({ version: 2, heartbeats: a })
  ).length;
}
/**
 * @license
 * Copyright 2019 Google LLC
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 *   http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */
function Ee(a) {
  w(new l(
    "platform-logger",
    (e) => new R(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), w(new l(
    "heartbeat",
    (e) => new we(e),
    "PRIVATE"
    /* ComponentType.PRIVATE */
  )), f(g, v, a), f(g, v, "esm2017"), f("fire-js", "");
}
Ee("");
export {
  S as FirebaseError,
  Ae as SDK_VERSION,
  u as _DEFAULT_ENTRY_NAME,
  pe as _addComponent,
  d as _apps,
  _ as _components,
  Se as _getProvider,
  w as _registerComponent,
  Be as getApp,
  me as initializeApp,
  f as registerVersion
};
