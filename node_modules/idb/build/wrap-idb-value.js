const I = (e, n) => n.some((r) => e instanceof r);
let m, D;
function h() {
  return m || (m = [
    IDBDatabase,
    IDBObjectStore,
    IDBIndex,
    IDBCursor,
    IDBTransaction
  ]);
}
function B() {
  return D || (D = [
    IDBCursor.prototype.advance,
    IDBCursor.prototype.continue,
    IDBCursor.prototype.continuePrimaryKey
  ]);
}
const b = /* @__PURE__ */ new WeakMap(), f = /* @__PURE__ */ new WeakMap(), y = /* @__PURE__ */ new WeakMap(), a = /* @__PURE__ */ new WeakMap(), d = /* @__PURE__ */ new WeakMap();
function w(e) {
  const n = new Promise((r, o) => {
    const s = () => {
      e.removeEventListener("success", i), e.removeEventListener("error", t);
    }, i = () => {
      r(c(e.result)), s();
    }, t = () => {
      o(e.error), s();
    };
    e.addEventListener("success", i), e.addEventListener("error", t);
  });
  return n.then((r) => {
    r instanceof IDBCursor && b.set(r, e);
  }).catch(() => {
  }), d.set(n, e), n;
}
function E(e) {
  if (f.has(e))
    return;
  const n = new Promise((r, o) => {
    const s = () => {
      e.removeEventListener("complete", i), e.removeEventListener("error", t), e.removeEventListener("abort", t);
    }, i = () => {
      r(), s();
    }, t = () => {
      o(e.error || new DOMException("AbortError", "AbortError")), s();
    };
    e.addEventListener("complete", i), e.addEventListener("error", t), e.addEventListener("abort", t);
  });
  f.set(e, n);
}
let p = {
  get(e, n, r) {
    if (e instanceof IDBTransaction) {
      if (n === "done")
        return f.get(e);
      if (n === "objectStoreNames")
        return e.objectStoreNames || y.get(e);
      if (n === "store")
        return r.objectStoreNames[1] ? void 0 : r.objectStore(r.objectStoreNames[0]);
    }
    return c(e[n]);
  },
  set(e, n, r) {
    return e[n] = r, !0;
  },
  has(e, n) {
    return e instanceof IDBTransaction && (n === "done" || n === "store") ? !0 : n in e;
  }
};
function L(e) {
  p = e(p);
}
function M(e) {
  return e === IDBDatabase.prototype.transaction && !("objectStoreNames" in IDBTransaction.prototype) ? function(n, ...r) {
    const o = e.call(u(this), n, ...r);
    return y.set(o, n.sort ? n.sort() : [n]), c(o);
  } : B().includes(e) ? function(...n) {
    return e.apply(u(this), n), c(b.get(this));
  } : function(...n) {
    return c(e.apply(u(this), n));
  };
}
function T(e) {
  return typeof e == "function" ? M(e) : (e instanceof IDBTransaction && E(e), I(e, h()) ? new Proxy(e, p) : e);
}
function c(e) {
  if (e instanceof IDBRequest)
    return w(e);
  if (a.has(e))
    return a.get(e);
  const n = T(e);
  return n !== e && (a.set(e, n), d.set(n, e)), n;
}
const u = (e) => d.get(e);
export {
  d as a,
  I as i,
  L as r,
  u,
  c as w
};
