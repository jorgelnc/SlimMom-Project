import { r as h, w as u } from "./wrap-idb-value.jsx";
import { u as I } from "./wrap-idb-value.jsx";
function m(s, e, { blocked: t, upgrade: i, blocking: a, terminated: c } = {}) {
  const o = indexedDB.open(s, e), d = u(o);
  return i && o.addEventListener("upgradeneeded", (n) => {
    i(u(o.result), n.oldVersion, n.newVersion, u(o.transaction), n);
  }), t && o.addEventListener("blocked", (n) => t(
    // Casting due to https://github.com/microsoft/TypeScript-DOM-lib-generator/pull/1405
    n.oldVersion,
    n.newVersion,
    n
  )), d.then((n) => {
    c && n.addEventListener("close", () => c()), a && n.addEventListener("versionchange", (r) => a(r.oldVersion, r.newVersion, r));
  }).catch(() => {
  }), d;
}
const w = ["get", "getKey", "getAll", "getAllKeys", "count"], g = ["put", "add", "delete", "clear"], f = /* @__PURE__ */ new Map();
function l(s, e) {
  if (!(s instanceof IDBDatabase && !(e in s) && typeof e == "string"))
    return;
  if (f.get(e))
    return f.get(e);
  const t = e.replace(/FromIndex$/, ""), i = e !== t, a = g.includes(t);
  if (
    // Bail if the target doesn't exist on the target. Eg, getAll isn't in Edge.
    !(t in (i ? IDBIndex : IDBObjectStore).prototype) || !(a || w.includes(t))
  )
    return;
  const c = async function(o, ...d) {
    const n = this.transaction(o, a ? "readwrite" : "readonly");
    let r = n.store;
    return i && (r = r.index(d.shift())), (await Promise.all([
      r[t](...d),
      a && n.done
    ]))[0];
  };
  return f.set(e, c), c;
}
h((s) => ({
  ...s,
  get: (e, t, i) => l(e, t) || s.get(e, t, i),
  has: (e, t) => !!l(e, t) || s.has(e, t)
}));
export {
  m as openDB,
  I as unwrap,
  u as wrap
};
