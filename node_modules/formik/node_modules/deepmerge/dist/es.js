var b = function(r) {
  return l(r) && !u(r);
};
function l(e) {
  return !!e && typeof e == "object";
}
function u(e) {
  var r = Object.prototype.toString.call(e);
  return r === "[object RegExp]" || r === "[object Date]" || j(e);
}
var y = typeof Symbol == "function" && Symbol.for, g = y ? Symbol.for("react.element") : 60103;
function j(e) {
  return e.$$typeof === g;
}
function A(e) {
  return Array.isArray(e) ? [] : {};
}
function f(e, r) {
  return r.clone !== !1 && r.isMergeableObject(e) ? c(A(e), e, r) : e;
}
function m(e, r, t) {
  return e.concat(r).map(function(n) {
    return f(n, t);
  });
}
function s(e, r, t) {
  var n = {};
  return t.isMergeableObject(e) && Object.keys(e).forEach(function(a) {
    n[a] = f(e[a], t);
  }), Object.keys(r).forEach(function(a) {
    !t.isMergeableObject(r[a]) || !e[a] ? n[a] = f(r[a], t) : n[a] = c(e[a], r[a], t);
  }), n;
}
function c(e, r, t) {
  t = t || {}, t.arrayMerge = t.arrayMerge || m, t.isMergeableObject = t.isMergeableObject || b;
  var n = Array.isArray(r), a = Array.isArray(e), i = n === a;
  return i ? n ? t.arrayMerge(e, r, t) : s(e, r, t) : f(r, t);
}
c.all = function(r, t) {
  if (!Array.isArray(r))
    throw new Error("first argument should be an array");
  return r.reduce(function(n, a) {
    return c(n, a, t);
  }, {});
};
var M = c;
export {
  M as default
};
