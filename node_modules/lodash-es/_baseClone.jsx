import L from "./_Stack.jsx";
import B from "./_arrayEach.jsx";
import I from "./_assignValue.jsx";
import O from "./_baseAssign.jsx";
import _ from "./_baseAssignIn.jsx";
import M from "./_cloneBuffer.jsx";
import w from "./_copyArray.jsx";
import D from "./_copySymbols.jsx";
import G from "./_copySymbolsIn.jsx";
import N from "./_getAllKeys.jsx";
import U from "./_getAllKeysIn.jsx";
import h from "./_getTag.jsx";
import x from "./_initCloneArray.jsx";
import l from "./_initCloneByTag.jsx";
import K from "./_initCloneObject.jsx";
import P from "./isArray.jsx";
import R from "./isBuffer.jsx";
import W from "./isMap.jsx";
import Y from "./isObject.jsx";
import q from "./isSet.jsx";
import H from "./keys.jsx";
import J from "./keysIn.jsx";
var Q = 1, V = 2, X = 4, s = "[object Arguments]", Z = "[object Array]", $ = "[object Boolean]", z = "[object Date]", u = "[object Error]", d = "[object Function]", k = "[object GeneratorFunction]", v = "[object Map]", rr = "[object Number]", E = "[object Object]", or = "[object RegExp]", tr = "[object Set]", ir = "[object String]", nr = "[object Symbol]", er = "[object WeakMap]", fr = "[object ArrayBuffer]", ar = "[object DataView]", mr = "[object Float32Array]", gr = "[object Float64Array]", pr = "[object Int8Array]", cr = "[object Int16Array]", br = "[object Int32Array]", Tr = "[object Uint8Array]", jr = "[object Uint8ClampedArray]", yr = "[object Uint16Array]", Ar = "[object Uint32Array]", o = {};
o[s] = o[Z] = o[fr] = o[ar] = o[$] = o[z] = o[mr] = o[gr] = o[pr] = o[cr] = o[br] = o[v] = o[rr] = o[E] = o[or] = o[tr] = o[ir] = o[nr] = o[Tr] = o[jr] = o[yr] = o[Ar] = !0;
o[u] = o[d] = o[er] = !1;
function b(r, f, a, F, g, i) {
  var t, p = f & Q, c = f & V, C = f & X;
  if (a && (t = g ? a(r, F, g, i) : a(r)), t !== void 0)
    return t;
  if (!Y(r))
    return r;
  var T = P(r);
  if (T) {
    if (t = x(r), !p)
      return w(r, t);
  } else {
    var m = h(r), j = m == d || m == k;
    if (R(r))
      return M(r, p);
    if (m == E || m == s || j && !g) {
      if (t = c || j ? {} : K(r), !p)
        return c ? G(r, _(t, r)) : D(r, O(t, r));
    } else {
      if (!o[m])
        return g ? r : {};
      t = l(r, m, p);
    }
  }
  i || (i = new L());
  var y = i.get(r);
  if (y)
    return y;
  i.set(r, t), q(r) ? r.forEach(function(n) {
    t.add(b(n, f, a, n, r, i));
  }) : W(r) && r.forEach(function(n, e) {
    t.set(e, b(n, f, a, e, r, i));
  });
  var S = C ? c ? U : N : c ? J : H, A = T ? void 0 : S(r);
  return B(A || r, function(n, e) {
    A && (e = n, n = r[e]), I(t, e, b(n, f, a, e, r, i));
  }), t;
}
export {
  b as default
};
